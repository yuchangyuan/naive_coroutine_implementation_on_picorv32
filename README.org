#+title: A naive corotine implementation on picorv32
#+author: Yù Chāngyuǎn

# use large font, run below command with C-x C-e
# (set-frame-font "Ubuntu Mono-48")

* intro
** corotine
- a switchable task
- need manually switch
** picorv32
A pico 32bit RISC-V core
* corotine API
** what we need
- init/create a corotine
  + for main function, we init as 1st exist corotine
  + for other corotine, we need to create
- switch context: yield
- exit corotine
** switch context: implementation of yield function
*** 3 step
- save context
- find next coroutine to execute
- restore context
*** save context
**** what
- register: all callee saved register in ABI need to save
- stack: not save, just use different stack for different coroutine

| name    | ABI Mnemonic | Meaning                | Preserved across calls? |
|---------+--------------+------------------------+-------------------------|
| x0      | zero         | zero                   | - (immutable)           |
| x1      | ra           | return address         | no                      |
| x2      | sp           | stack pointer          | yes                     |
| x3      | gp           | global pointer         | - (unallocatable)       |
| x4      | tp           | thread pointer         | - (unallocatable)       |
| x5-x7   | t0-t2        | temporary registers    | no                      |
| x8-x9   | s0-s1        | callee-saved registers | yes                     |
| x10-x17 | a0-a7        | argument registers     | no                      |
| x18-x27 | s2-s11       | callee-saved registers | yes                     |
| x28-x31 | t3-t3        | temporary registers    | no                      |
**** where

*** find next task
*** restore context
*** actual implementation
#+begin_src c
#+end_src
** init/create a coroutine
** exit coroutine
* test
** picorv32 simulation environment
** single task example
** 3 task example
* reference
- https://github.com/riscv-non-isa/riscv-elf-psabi-doc/blob/master/riscv-cc.adoc
